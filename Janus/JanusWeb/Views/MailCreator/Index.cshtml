<style>
    /* Position the VC panel off-screen initially */
    #vcPanel {
        position: fixed;
        top: 0;
        right: -400px; /* Initially hidden off-screen */
        width: 400px;
        height: 100%;
        background-color: white;
        box-shadow: -2px 0 5px rgba(0, 0, 0, 0.2);
        z-index: 1050;
        transition: right 0.3s ease;
        padding: 20px;
        overflow-y: auto;
    }

    /* Show the VC panel when it's expanded */
    #vcPanel.show {
        right: 0; /* Slide in from the right */
    }

    /* Ensure the form takes full width */
    .container {
        width: 100%;
        padding: 0 15px;
    }

    /* Add overlay when VC panel is visible */
    .overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    .overlay.show {
        display: block;
    }
</style>

<div class="container">
    <div class="row">
        <!-- Email Form -->
        <div class="col-md-12">
            <h2>Create and Send Email</h2>
            @if (ViewBag.Success != null)
            {
                <div class="alert alert-success">
                    @ViewBag.Success
                </div>
            }
            @if (ViewBag.Error != null)
            {
                <div class="alert alert-danger">
                    @ViewBag.Error
                </div>
            }

            <form asp-action="SendEmail" method="post">
                <div class="form-group">
                    <label for="recipientEmail">To:</label>
                    <input type="email" id="recipientEmail" name="recipientEmail" class="form-control" value="qwertz0014@web.de" required />
                </div>

                <div class="form-group row">
                    <div class="col-6">
                        <label for="Subject">Subject:</label>
                        <input type="text" id="Subject" name="Subject" class="form-control" value="mySubject" required />
                    </div>

                    <div class="col-3">
                        <label for="SenderDID">SenderDID:</label>
                        <input type="text" id="SenderDID" name="SenderDID" class="form-control" value="did:example:1" required />
                    </div>
                    <div class="col-3">
                        <label for="receiverDID">ReceiverDID:</label>
                        <input type="text" id="receiverDID" name="receiverDID" class="form-control" value="did:example:2" required />
                    </div>
                </div>

                <div class="form-group">
                    <label for="Body">Message:</label>
                    <textarea id="Body" name="Body" class="form-control" rows="10" required>Dies ist ein Test</textarea>
                </div>

                <!-- Button to Open VC Panel -->
                <button type="button" class="btn btn-secondary mt-1" id="openVcPanel">
                    Select Verifiable Credentials (VCs)
                </button>

                <!-- Hidden input to store selected VCs -->
                <input type="hidden" id="selectedVCs" name="SelectedVCs" />

                <button type="submit" class="btn btn-primary mt-1">Send Email</button>
            </form>
        </div>
    </div>
</div>

<!-- Collapsible VC Panel -->
<div id="vcPanel">
    <h3>Verifiable Credentials</h3>
    <div id="vcContainer"></div> <!-- Container for VCs -->
    <!-- Button to Close VC Panel -->
    <button type="button" class="btn btn-secondary mt-3" id="closeVcPanel">Close</button>
</div>

<!-- Overlay -->
<div class="overlay" id="overlay"></div>

<script>
    // Get elements
    const vcPanel = document.getElementById('vcPanel');
    const overlay = document.getElementById('overlay');
    const openButton = document.getElementById('openVcPanel');
    const closeButton = document.getElementById('closeVcPanel');
    const vcContainer = document.getElementById('vcContainer'); // Container for VCs

    // Function to fetch VCs from backend
    async function fetchVCs(did) {
        console.log('Fetching VCs for DID:', did);
        try {
            const response = await fetch(`/MailCreator/FetchVCs`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ SenderDID: did }),
            });

            if (!response.ok) {
                console.error('Network response was not ok:', response.statusText);
                throw new Error('Network response was not ok');
            }

            // The response should be parsed into a JSON object/array
            const data = await response.json();
            console.log('Received VCs:', data);

            // Ensure the data is an array
            if (Array.isArray(data)) {
                displayVCs(data);
            } else {
                console.error('VCs data is not an array:', data);
            }
        } catch (error) {
            console.error('Error fetching VCs:', error);
        }
    }

    let userSelectedVcs = []

    function displayVCs(vcs) {
        if (!Array.isArray(vcs)) {
            console.error('VCs data is not an array:', vcs);
            return;
        }

        const vcContainer = document.getElementById('vcContainer');
        vcContainer.innerHTML = ''; // Clear existing VCs

        vcs.forEach(vc => {
            const vcElement = document.createElement('div');
            vcElement.className = 'form-check';
            // Define the possible keys to check
            const possibleKeys = ["authorization", "exam"];
            let type = "Not Available";

            // Look for either "authorization" or "exam" key with a "type" field
            for (const key of possibleKeys) {
                if (vc.credentialSubject[key]?.type) {
                    type = vc.credentialSubject[key].type;
                    break;
                }
            }
            let validUntil = ""
            if (vc.validUntil) {
                validUntil = vc.validUntil.split("T")[0];
            }
            // Store the full VC as a JSON string in the data-vc attribute
            vcElement.innerHTML = `
                        <input class="form-check-input" type="checkbox" id="vc${vc.id}" data-vc='${JSON.stringify(vc)}' ${isVCSelected(vc) ? 'checked' : ''} />
                    <label class="form-check-label" for="vc${vc.id}">
                        ${type} ${validUntil}
                    </label>
                `;
            vcContainer.appendChild(vcElement);
        });

        // Listen for checkbox changes
        document.querySelectorAll('.form-check-input').forEach(input => {
            input.addEventListener('change', updateSelectedVCs);
        });
    }

    function isVCSelected(vc) {
        return userSelectedVcs.some(currentVC => JSON.stringify(currentVC) === JSON.stringify(vc));
    }

    // Function to update hidden input with full VC objects when selected/deselected
    function updateSelectedVCs() {
        const currentlySelectedVCs = Array.from(document.querySelectorAll('.form-check-input:checked'))
            .map(input => JSON.parse(input.getAttribute('data-vc'))); // Get full VC objects

        userSelectedVcs = currentlySelectedVCs
        // Update the hidden input field with the selected VCs as JSON
        document.getElementById('selectedVCs').value = JSON.stringify(currentlySelectedVCs); // Store full VCs as JSON
    }

    // Open VC Panel and fetch VCs
    openButton.addEventListener('click', function () {
        const did = document.getElementById('SenderDID').value;
        console.log('Opening VC Panel with DID:', did); // Log when opening the panel
        fetchVCs(did);
        vcPanel.classList.add('show');
        overlay.classList.add('show');
    });

    // Close VC Panel
    closeButton.addEventListener('click', function () {
        vcPanel.classList.remove('show');
        overlay.classList.remove('show');
        console.log('Closing VC Panel'); // Log when closing the panel
    });

    // Close when clicking on the overlay
    overlay.addEventListener('click', function () {
        vcPanel.classList.remove('show');
        overlay.classList.remove('show');
        console.log('Clicked on overlay to close VC Panel'); // Log when clicking on overlay
    });
</script>
